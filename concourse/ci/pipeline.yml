resource_types:
- name: kubernetes-pre-prod
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "{{kubernetes-version-pre-prod}}"
- name: kubernetes-prod
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "{{kubernetes-version-prod}}"
- name: concourse-http-resource
  type: docker-image
  source:
    repository: edtan1/concourse-http-resource

resources:
- name: git-repo
  type: git
  webhook_token: ((webhook_token))
  source:
    uri: ((git_repo))
    branch: ((git_branch))

- name: kubernetes-cluster-pre-prod
  type: kubernetes-pre-prod
  icon: kubernetes
  source:
    insecure_skip_tls_verify: {{kubernetes-skip-tls-verification-pre-prod}}
    kubeconfig: {{kubernetes-config-pre-prod}}
    context: {{kubernetes-context-pre-prod}}
    namespace: {{kubernetes-namespace}}
- name: kubernetes-cluster-prod
  type: kubernetes-prod
  icon: kubernetes
  source:
    insecure_skip_tls_verify: {{kubernetes-skip-tls-verification-prod}}
    kubeconfig: {{kubernetes-config-prod}}
    context: {{kubernetes-context-prod}}
    namespace: {{kubernetes-namespace}}
- name: container-image
  type: docker-image
  icon: docker
  source:
    repository: ((container-image))
- name: drupal-http-endpoint-pre-prod
  type: concourse-http-resource
  source:
    url: {{drupal-update-endpoint-pre-prod}}
    method: "GET"
- name: drupal-http-endpoint-prod
  type: concourse-http-resource
  source:
    url: {{drupal-update-endpoint-prod}}
    method: "GET"

jobs:
- name: deploy-image-pre-prod
  plan:
  - get: git-repo
    trigger : true
  - get: container-image
    trigger: true
    params:
      skip_download: true
  - put: kubernetes-cluster-pre-prod
    params:
      kubectl: |
        set image deployment ((kubernetes-deployment)) ((kubernetes-container))=$(cat container-image/repository)@$(cat container-image/digest)
      wait_until_ready: {{kubernetes-wait-until-ready-pre-prod}}

- name: update-drupal-pre-prod
  plan:
  - get: container-image
    passed: [deploy-image-pre-prod]
    trigger: true
    params:
      skip_download: true
  - put: drupal-http-endpoint-pre-prod



- name: test-pre-prod-chrome
  plan:
  - get: container-image
    passed: [update-drupal-pre-prod]
    trigger: true
    params:
      skip_download: true
  - get: git-repo
  - task: test
    config:
      params:
        ZELENIUMENDPOINT: ((zeleniumendpoint))
        DRUPALENDPOINT: ((drupalendpoint))
        DRUPALUSERNAME: ((drupalusername))
        DRUPALPASSWORD: ((drupalpassword))
        BROWSERTYPE: chrome
      inputs:
      - name: git-repo
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: python, tag: "3"}
      run:
        path: "git-repo/concourse/ci/autotests/testrun.sh"
        args: ["git-repo/concourse/ci/autotests/requirements.txt", "git-repo/concourse/ci/autotests/"]

- name: test-pre-prod-firefox
  plan:
  - get: container-image
    passed: [update-drupal-pre-prod]
    trigger: true
    params:
      skip_download: true
  - get: git-repo
  - task: test
    config:
      params:
        ZELENIUMENDPOINT: ((zeleniumendpoint))
        DRUPALENDPOINT: ((drupalendpoint))
        DRUPALUSERNAME: ((drupalusername))
        DRUPALPASSWORD: ((drupalpassword))
        BROWSERTYPE: firefox
      inputs:
      - name: git-repo
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: python, tag: "3"}
      run:
        path: "git-repo/concourse/ci/autotests/testrun.sh"
        args: ["git-repo/concourse/ci/autotests/requirements.txt", "git-repo/concourse/ci/autotests/"]


- name: deploy-image-prod
  plan:
  - get: container-image
    passed: [test-pre-prod-firefox,test-pre-prod-chrome]
    trigger: true
    params:
      skip_download: true
  - put: kubernetes-cluster-prod
    params:
      kubectl: |
        set image deployment ((kubernetes-deployment)) ((kubernetes-container))=$(cat container-image/repository)@$(cat container-image/digest)
      wait_until_ready: {{kubernetes-wait-until-ready-prod}}
- name: update-drupal-prod
  plan:
  - get: container-image
    passed: [deploy-image-prod]
    trigger: true
    params:
      skip_download: true
  - put: drupal-http-endpoint-prod

